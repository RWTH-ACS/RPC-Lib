extern crate cc;
extern crate pest;
extern crate proc_macro;
extern crate quote;
#[macro_use]
extern crate pest_derive;

use proc_macro::TokenStream;

use std::fs::File;
use std::io::prelude::*;
use std::path::Path;

use std::fs::{copy, create_dir, remove_dir_all};
use std::process::Command;

use quote::quote;

mod parser;
mod rpc_struct;

#[proc_macro_attribute]
pub fn include_rpcl(meta: TokenStream, item: TokenStream) -> TokenStream {
    //Get Name of .x-File
    let name_x_file: String = meta
        .into_iter()
        .next()
        .expect("Invalid use of Macro: include_rpcl(<Filename>)")
        .to_string();
    let len = name_x_file.len();
    let path = Path::new(&name_x_file[1..len - 1]);

    compile_c_part(&name_x_file[1..len - 3]);

    //Read .x-File
    let mut file = File::open(&path).expect("Couldn't open .x-File");
    let mut s = String::new();
    file.read_to_string(&mut s)
        .expect(&std::format!("Couldn't read {}", path.display()));
    println!("Parsing {}", path.display());

    //Extract Structname (struct <Name>;)
    let struct_name: String = item
        .into_iter()
        .skip(1)
        .next()
        .expect("Invalid Syntax: Must be: struct <Name>;")
        .to_string();

    //Parsing
    let (type_code, prog_num, ver_num) = parser::parse(&s, &struct_name);

    let common_code = rpc_struct::generate_ctor_dtor(&struct_name, prog_num, ver_num);
    let code = quote! {
        #common_code
        #type_code
    };
    code.into()
}

fn compile_c_part(name_x_file: &str) {

    let temp_dir = "rpcgen_c_files";
    // Create directory for fiels generated by rpcgen
    create_dir(&temp_dir).expect("Failed to create temporary directory for rpcgen");
    // Copy .x-file to that directory
    copy(
        format!("{}.x", &name_x_file),
        format!("{}/{}.x", &temp_dir, &name_x_file),
    )
    .expect("Failed at copying .x-file");

    // Run rpcgen
    Command::new("rpcgen")
        .args(&[&format!("{}.x", &name_x_file), "-N"])
        .current_dir(&temp_dir)
        .status()
        .expect("Couldn't find rpcgen!");

    // Compile C-Part
    cc::Build::new()
        .file("rpc-lib/c/rpc-connection.c")
        .file(format!("{}/{}_clnt.c", &temp_dir, &name_x_file))
        .file(format!("{}/{}_xdr.c", &temp_dir, &name_x_file))
        .target("x86_64-unknown-linux-gnu")
        .opt_level(0)
        .warnings(false)
        .host("x86_64-unknown-linux-gnu")
        .out_dir(&temp_dir)
        .cargo_metadata(false)
        .include("rpc-lib/submodules/libtirpc/install/include/tirpc/")
        .compile("librpc-connection.a");

    // Copy Library
    copy(format!("{}/librpc-connection.a", &temp_dir), "librpc-connection.a").expect("Failed to copy library");

    // Cleanup
    remove_dir_all(&temp_dir).expect("Failed to remove temporary directory");
}

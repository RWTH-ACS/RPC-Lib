// Copyright 2022 Philipp Fensch
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// https://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

file = _{ SOI ~	 specification* ~ program_def ~ EOI}

// RPCL-Additions to XDR
program_def = {"program" ~ identifier ~ "{" ~ version_def+ ~ "}" ~ "=" ~ constant ~ ";" }
version_def = {"version" ~ identifier ~ "{" ~ procedure_def+ ~ "}" ~ "=" ~ constant ~ ";" }
procedure_def = { proc_return ~  identifier ~ "(" ~ proc_args ~ ")" ~ "=" ~ value ~ ";" }
proc_return = { type_specifier }
proc_args = { void | type_specifier ~ ("," ~ type_specifier)* }

// XDR
specification = { definition+ }
definition = _{ type_def | enum_def | struct_def | union_def | constant_def }

// XDR - Typedefs
type_def = { "typedef" ~ declaration ~ ";" }
enum_def = { "enum" ~ identifier ~ enum_body ~ ";" }
struct_def = { "struct" ~ identifier ~ struct_body ~ ";" }
union_def = { "union" ~ identifier ~ union_body ~ ";" }
constant_def = {"const" ~ identifier ~ "=" ~ constant ~ ";" }

// XDR - Discriminated Unions
union_type_spec = { "union" ~ union_body }
union_body = { "switch" ~ "(" ~ discriminant_decl ~ ")" ~ "{" ~ case_spec+ ~ ("default" ~ ":" ~ declaration ~ ";")? ~ "}" }
case_spec = { ("case" ~ value ~ ":")+ ~ declaration ~ ";" }
discriminant_decl = { declaration }

// XDR - Structs
struct_type_spec = { "struct" ~ struct_body }
struct_body = {"{" ~ (declaration ~ ";")+ ~ "}" }

// XDR - Enums
enum_type_spec = { "enum" ~ enum_body }
enum_body = { "{" ~ enum_case ~ ("," ~ enum_case)* ~ "}" }
enum_case = { identifier ~ "=" ~ value }

// XDR - Declaration
declaration = {
	pointer
    | string_decl
    | varlen_array
    | fixedlen_array
    | normal_type_name_decl
    | void }
void = { "void" }
pointer = { type_specifier ~ "*" ~ identifier }
varlen_array = { type_specifier ~ identifier ~ "<" ~ value? ~ ">" }
fixedlen_array = { type_specifier ~ identifier ~ "[" ~ value? ~  "]" }
normal_type_name_decl = { type_specifier ~ identifier }
string_decl = { "string" ~ identifier ~ "<" ~ value? ~ ">" }

// XDR - Types
type_specifier = {
    primitive_type
    | void
    | enum_type_spec
    | struct_type_spec
    | union_type_spec
    | identifier }
primitive_type = @{
    (("unsigned" ~ WHITESPACE+)? ~ "int"
    | ("unsigned" ~ WHITESPACE+)? ~ "hyper"
    | "float" | "double" | "quadruple"
    | "bool"
    | "string<>" | "string" ) ~ !(ASCII_ALPHANUMERIC | "_" )
}

value = { constant | identifier }
constant = @{ "0x" ~ ASCII_HEX_DIGIT+ | "0" ~ ASCII_OCT_DIGIT+ | "-"? ~ ASCII_DIGIT+ }
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_" )* }

WHITESPACE = _{ " " | "\t" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
